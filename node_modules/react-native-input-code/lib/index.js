"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_native_1 = require("react-native");
const InputCode = react_1.default.forwardRef(({ code, length, onChangeCode, onFullFill, passcode, passcodeChar, autoFocus, oneTimeCode, style, codeContainerStyle, codeContainerCaretStyle, codeTextStyle, testID, }, ref) => {
    const textInputCode = react_1.useRef(null);
    react_1.useImperativeHandle(ref, () => ({
        focus: () => {
            textInputCode.current.focus();
        },
    }));
    const onPressCode = react_1.useCallback(() => {
        textInputCode.current.focus();
    }, []);
    const onChangeText = react_1.useCallback((value) => {
        const newCode = value.replace(/[^0-9]/g, '');
        if (code === newCode)
            return;
        onChangeCode && onChangeCode(newCode);
        if (newCode.length === length) {
            react_native_1.Keyboard.dismiss();
            react_native_1.InteractionManager.runAfterInteractions(() => {
                onFullFill && onFullFill(newCode);
            });
        }
    }, [code, length, onChangeCode, onFullFill]);
    const extractCode = (index) => {
        if (code.length <= index)
            return '';
        if (passcode) {
            return passcodeChar || '*';
        }
        return code.substr(index, 1);
    };
    const renderCode = (index) => (react_1.default.createElement(react_native_1.View, { style: code.length === index
            ? [styles.codeContainerCaret, codeContainerCaretStyle]
            : [styles.codeContainer, codeContainerStyle], key: 'input-code-' + index.toString() },
        react_1.default.createElement(react_native_1.Text, { style: { fontSize: 30, ...codeTextStyle } }, extractCode(index))));
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(react_native_1.View, { style: style },
            react_1.default.createElement(react_native_1.TouchableOpacity, { onPress: onPressCode, style: { alignItems: 'stretch' }, activeOpacity: 1 },
                react_1.default.createElement(react_native_1.View, { style: { flexDirection: 'row', justifyContent: 'space-around' } }, Array(length)
                    .fill(0)
                    .map((item, index) => renderCode(index))))),
        react_1.default.createElement(react_native_1.TextInput, { value: code, onChangeText: onChangeText, ref: textInputCode, maxLength: length, autoFocus: autoFocus, caretHidden: true, textContentType: oneTimeCode ? 'oneTimeCode' : undefined, keyboardType: "number-pad", style: { fontSize: 0, height: 1, opacity: 0, margin: 0, padding: 0 }, testID: testID })));
});
const styles = {
    codeContainer: {
        justifyContent: 'center',
        alignItems: 'center',
        width: 50,
        height: 50,
        borderWidth: 1,
        borderColor: 'gray',
    },
    codeContainerCaret: {
        justifyContent: 'center',
        alignItems: 'center',
        width: 50,
        height: 50,
        borderWidth: 1,
        borderColor: 'gray',
    },
};
InputCode.defaultProps = {
    autoFocus: false,
};
exports.default = InputCode;
//# sourceMappingURL=index.js.map